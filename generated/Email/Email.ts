// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Msg_Recieved extends ethereum.Event {
  get params(): Msg_Recieved__Params {
    return new Msg_Recieved__Params(this);
  }
}

export class Msg_Recieved__Params {
  _event: Msg_Recieved;

  constructor(event: Msg_Recieved) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get data(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Email__messagesResult {
  value0: Address;
  value1: Address;
  value2: Bytes;

  constructor(value0: Address, value1: Address, value2: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromBytes(this.value2));
    return map;
  }
}

export class Email extends ethereum.SmartContract {
  static bind(address: Address): Email {
    return new Email("Email", address);
  }

  messageId(): BigInt {
    let result = super.call("messageId", "messageId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_messageId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("messageId", "messageId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  messages(param0: Address, param1: BigInt): Email__messagesResult {
    let result = super.call(
      "messages",
      "messages(address,uint256):(address,address,bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new Email__messagesResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBytes()
    );
  }

  try_messages(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<Email__messagesResult> {
    let result = super.tryCall(
      "messages",
      "messages(address,uint256):(address,address,bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Email__messagesResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBytes()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  recievers(param0: Address): boolean {
    let result = super.call("recievers", "recievers(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_recievers(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("recievers", "recievers(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class RegisterCall extends ethereum.Call {
  get inputs(): RegisterCall__Inputs {
    return new RegisterCall__Inputs(this);
  }

  get outputs(): RegisterCall__Outputs {
    return new RegisterCall__Outputs(this);
  }
}

export class RegisterCall__Inputs {
  _call: RegisterCall;

  constructor(call: RegisterCall) {
    this._call = call;
  }

  get reciever(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RegisterCall__Outputs {
  _call: RegisterCall;

  constructor(call: RegisterCall) {
    this._call = call;
  }
}

export class SendMessageCall extends ethereum.Call {
  get inputs(): SendMessageCall__Inputs {
    return new SendMessageCall__Inputs(this);
  }

  get outputs(): SendMessageCall__Outputs {
    return new SendMessageCall__Outputs(this);
  }
}

export class SendMessageCall__Inputs {
  _call: SendMessageCall;

  constructor(call: SendMessageCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SendMessageCall__Outputs {
  _call: SendMessageCall;

  constructor(call: SendMessageCall) {
    this._call = call;
  }
}
